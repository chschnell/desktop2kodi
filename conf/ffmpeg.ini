#
# conf/ffmpeg.ini
# Ffmpeg command line fragments for desktop2kodi.
#

# ----------------------------------------------------------------------------
# Audio input
# ----------------------------------------------------------------------------
#
# NOTE: You need to download and install 
#
#   https://github.com/rdp/screen-capture-recorder-to-video-windows-free/releases
#
# in order to use the DirectShow audio grabber "dshow_vac" (Windows only).

[dshow_vac]
type = audio_input
description = DirectShow audio grabber (virtual-audio-capturer)
platform = windows
unmutable = true
args = -f dshow -thread_queue_size 256 -i audio=virtual-audio-capturer

# ----------------------------------------------------------------------------
# Video input
# ----------------------------------------------------------------------------
#
# NOTE: gdigrab and ddagrab create warnings like:
#   [flv @ ...] Invalid DTS: 217 PTS: 67 in output stream 0:0, replacing by guess
#   [flv @ ...] Invalid DTS: 3233 PTS: 3217 in output stream 0:0, replacing by guess
#   [flv @ ...] Invalid DTS: 4217 PTS: 4200 in output stream 0:0, replacing by guess
# Each of these warnings is accompanied by loss of a few frames.
# TODO: only gdigrab_60fps works on a Raspberry Pi 4/RTMP, gdigrab produces stream without picture

[gdigrab]
type = video_input
description = GDI frame grabber at 29.97fps (NTSC)
platform = windows
args = -f gdigrab -thread_queue_size 256 -probesize 32M -i desktop

[gdigrab_60fps]
type = video_input
description = GDI frame grabber at 60fps
platform = windows
args = -f gdigrab -thread_queue_size 256 -probesize 32M -framerate 60 -i desktop

# NOTE: ddagrab produces stream without picture on Raspberry Pi 4/RTMP
[ddagrab]
type = video_input
description = D3D11 frame grabber at 30fps
platform = windows
args = -init_hw_device d3d11va -filter_complex ddagrab=0

# recommended for nginx/rtmp
[ddagrab_60fps]
type = video_input
description = D3D11 frame grabber at 60fps
platform = windows
args = -init_hw_device d3d11va -filter_complex ddagrab=0:framerate=60

# ----------------------------------------------------------------------------
# Audio encoder
# ----------------------------------------------------------------------------

# recommended
[aac]
type = audio_encoder
description = Advanced Audio Coding (AAC) audio encoder
args = -c:a aac

[ac3]
type = audio_encoder
description =  Audio Codec 3 (AC3) audio encoder
args = -c:a ac3

# ----------------------------------------------------------------------------
# Video encoder
# ----------------------------------------------------------------------------
# NOTE: H.265 not supported by nginx/rtmp, only H.264

# CPU video encoder

[libx264]
type = video_encoder
description = CPU-based H.264 video encoder
args = -c:v libx264 -pix_fmt yuv420p

[libx264_hq]
type = video_encoder
description = CPU-based H.264 video encoder (high quality)
args = -c:v libx264 -crf 17 -pix_fmt yuv420p

[libx265]
type = video_encoder
description = CPU-based H.265/HEVC video encoder
args = -c:v libx265 -x265-params log-level=warning -force_key_frames expr:gte(t,n_forced) -pix_fmt yuv420p -qmin 39 -qmax 39

[libx265_10bit]
type = video_encoder
description = CPU-based H.265/HEVC video encoder (10 bit)
args = -c:v libx265 -x265-params log-level=warning -force_key_frames expr:gte(t,n_forced) -pix_fmt yuv420p10

[libx265_720p]
type = video_encoder
description = CPU-based H.265/HEVC video encoder (720p, 10 bit)
args = -c:v libx265 -x265-params log-level=warning -force_key_frames expr:gte(t,n_forced) -pix_fmt yuv420p10 -vf scale=-1:720

[libx265_480p]
type = video_encoder
description = CPU-based H.265/HEVC video encoder (720p, 10 bit)
args = -c:v libx265 -x265-params log-level=warning -force_key_frames expr:gte(t,n_forced) -pix_fmt yuv420p10 -vf scale=-1:480

# nVidia GPU video encoder

# recommended for nginx/rtmp
[h264_nvenc]
type = video_encoder
description = NVIDIA GPU-accelerated H.264 video encoder
args = -c:v h264_nvenc -preset p7 -tune hq -b:v 32M -maxrate 32M -bufsize 48M -profile:v 0 -level 52

[h264_nvenc_480p]
type = video_encoder
description = NVIDIA GPU-accelerated H.264 video encoder (10 MBit/s, 480p)
args = -c:v h264_nvenc -b:v 10M -preset p7 -tune hq -vf scale=-1:480

[h264_nvenc_720p]
type = video_encoder
description = NVIDIA GPU-accelerated H.264 video encoder (10 MBit/s, 720p)
args = -c:v h264_nvenc -b:v 10M -preset p7 -tune hq -vf scale=-1:720

[hevc_nvenc]
type = video_encoder
description = NVIDIA GPU-accelerated H.265/HEVC video encoder
args = -c:v hevc_nvenc -preset p7 -tune hq -rc vbr -qmin 35 -qmax 39

[hevc_nvenc_10bit]
type = video_encoder
description = NVIDIA GPU-accelerated H.265/HEVC video encoder (10 bit)
args = -c:v hevc_nvenc -preset p7 -tune hq -force_key_frames expr:gte(t,n_forced) -profile:v main10

[hevc_nvenc_720p]
type = video_encoder
description = NVIDIA GPU-accelerated H.265/HEVC video encoder (720p, 10 bit)
args = -c:v hevc_nvenc -preset p7 -tune hq -force_key_frames expr:gte(t,n_forced) -vf scale=-1:720 -profile:v main10

# AMD GPU video encoder

# NOTE: untested
[hevc_amf]
type = video_encoder
description = AMD GPU-accelerated H.265/HEVC video encoder
platform = windows
args = -c:v hevc_amf

# NOTE: untested
[hevc_vaapi]
type = video_encoder
description = AMD GPU-accelerated H.265/HEVC video encoder
platform = linux
args = -c:v hevc_vaapi
